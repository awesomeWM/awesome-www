# awesome-stop-unfocused

A module for [Awesome WM](https://awesomewm.org) to stop unfocused clients
(programs) that might take CPU resources unnecessarily (e.g. browsers).

## Usage

1. Download [stop_unfocused.lua](https://awesomewm.org/recipes/stop_unfocused.lua),
   e.g. into `~/.config/awesome/lib`.
2. Add the following to your `rc.lua`, which automatically enables it:

   ```lua
   local stop_unfocused = require('lib/stop_unfocused')
   ```

## Configuration

### Rules

You can configure the rules for matching clients:

```lua
stop_unfocused.config.rules = {
  {rule = {class = 'qutebrowser'}},
  {rule = {class = 'Firefox'}},
  {rule = {class = 'Thunderbird'}},
}
```

### Timeout

You can configure the global timeout after which an unfocused client (matching
the rules) should get stopped (in seconds):

```lua
stop_unfocused.config.stop_timeout = 10
```

You can also specify this in the rule:

```lua
stop_unfocused.config.rules = {
  {rule = {class = 'qutebrowser'}, timeout = 10},
  {rule = {class = 'Firefox'}},
  {rule = {class = 'Thunderbird'}, timeout = 2},
}
```

## Methods

You can use the `sigstop()` and `sigcont()` methods, e.g. for the tasklist
mouse buttons:

```lua
local tasklist_buttons = gears.table.join(
                     -- Left click: (un)minimize the client.
                     awful.button({ }, 1, function (c)
                                              if c == client.focus then
                                                  c.minimized = true
                                                  stop_unfocused.sigstop(c)
                                              else
                                                  -- Without this, the following
                                                  -- :isvisible() makes no sense
                                                  c.minimized = false
                                                  stop_unfocused.sigcont(c)
                                                  if not c:isvisible() and c.first_tag then
                                                      c.first_tag:view_only()
                                                  end
                                                  -- This will also un-minimize
                                                  -- the client, if needed
                                                  client.focus = c
                                                  c:raise()
                                              end
                                          end),
                     â€¦
                     )
```
